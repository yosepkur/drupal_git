<?php
/**
 * @file
 * Git backend for Version Control API - Provides Git commit information and
 * account management as a pluggable backend.
 *
 * Copyright 2008 by Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 * Copyright 2009 by Cornelius Riemenschneider ("CorniI", http://drupal.org/user/136353)
 */

/**
 * Implementation of hook_install().
 */
function versioncontrol_git_install() {
  // Create tables.
  drupal_install_schema('versioncontrol_git');
}

/**
 * Implementation of hook_uninstall().
 */
function versioncontrol_git_uninstall() {
  // Create tables.
  drupal_uninstall_schema('versioncontrol_git');
}

function versioncontrol_git_schema() {
  $schema = array();
  $schema['versioncontrol_git_operations'] = array(
    'description' => 'A one-to-one table extending {versioncontrol_operations} with some additional git-specific data.',
    'fields' => array(
      'vc_op_id' => array(
        'description' => 'Foreign key to {versioncontrol_operations}.vc_op_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'author_name' => array(
        'description' => "Author's user.name field from a git commit or tag object.",
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'committer_name' => array(
        'description' => "Committer's user.name field from a git commit or tag object.",
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'parent_commit' => array(
        'description' => 'SHA-1 hash of the parent commit. Same as the value recorded in {versioncontrol_operations}.revision',
        'type' => 'char',
        'length' => 40,
        'not null' => TRUE,
        'default' => '',
      ),
      'merge' => array(
        'description' => 'Boolean indicating whether or not the operation is a merge commit.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('vc_op_id'),
  );

  $schema['versioncontrol_git_item_revisions'] = array(
    'description' => 'A one-to-one table extending {versioncontrol_item_revisions} with some additional git-specific data.',
    'fields' => array(
      'item_revision_id' => array(
        'description' => 'Foreign key to {versioncontrol_item_revisions}.item_revision_id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'blob_hash' => array(
        'description' => 'This item blob hash.',
        'type' => 'char',
        'length' => 40,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('item_revision_id'),
  );

  $schema['versioncontrol_git_repositories'] = array(
    'description' => 'A one-to-one table extending {versioncontrol_repositories} with additional git-specific data.',
    'fields' => array(
      'repo_id' => array(
        'description' => 'Foreign key to {versioncontrol_repositories}.repo_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'default_branch' => array(
        'description' => 'The default (HEAD) branch of the git repository.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('repo_id'),
  );

  $schema['versioncontrol_git_event_data'] = array(
    'description' => 'Links Version control events, as represented by the {versioncontrol_event_log} table, with real Git commit, branch and tag data.',
    'fields' => array(
      'elid' => array(
        'description' => 'Foreign key to {versioncontrol_event_log}.elid; identifies the Git event to which this extended linking data corresponds.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'refname' => array(
        'description' => 'The name of the ref that was updated.',
        'type' => 'varchar',
        'not null' => TRUE,
      ),
      'label_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'reftype' => array(
        'description' => '2 == branch, 3 == tag.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
      'old_sha1' => array(
        'description' => 'The object to which this ref pointed before the push.',
        'type' => 'char',
        'length' => 40,
        'not null' => TRUE,
      ),
      'new_sha1' => array(
        'description' => 'The object to which this ref pointed after the push.',
        'type' => 'char',
        'length' => 40,
        'not null' => TRUE,
      ),
      'ff' => array(
        'description' => 'For branch updates, indicates whether or not the ref update was a fast-forward.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('elid', 'refname', 'reftype'),
    'indexes' => array(
      'old_sha1' => array('old_sha1'),
      'new_sha1' => array('new_sha1'),
    ),
  );

  if (in_array($GLOBALS['db_type'], array('mysql', 'mysqli'))) {
    // This is evil, but there is not standard way to change a field collation.
    $schema['versioncontrol_git_event_data']['fields']['refname']['mysql_type'] = "VARCHAR(255) CHARACTER SET utf8 COLLATE utf8_bin";
  }
  else {
    $schema['versioncontrol_git_event_data']['fields']['refname']['length'] = 255;
  }

  return $schema;
}

function versioncontrol_git_update_6201() {
  $ret = array();

  $schema = array(
    'description' => 'A one-to-one table extending {versioncontrol_operations} with some additional git-specific data.',
    'fields' => array(
      'vc_op_id' => array(
        'description' => 'Foreign key to {versioncontrol_operations}.vc_op_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'author_name' => array(
        'description' => "Author's user.name field from a git commit or tag object.",
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'committer_name' => array(
        'description' => "Committer's user.name field from a git commit or tag object.",
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'parent_commit' => array(
        'description' => 'SHA-1 hash of the parent commit. Same as the value recorded in {versioncontrol_operations}.revision',
        'type' => 'char',
        'length' => 40,
        'not null' => TRUE,
        'default' => '',
      ),
      'merge' => array(
        'description' => 'Boolean indicating whether or not the operation is a merge commit.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('vc_op_id'),
  );

  db_create_table($ret, 'versioncontrol_git_operations', $schema);

  return $ret;
}

/**
 * Add versioncontrol_git_item_revisions table.
 */
function versioncontrol_git_update_6202() {
  $ret = array();

  $versioncontrol_git_item_revisions_schema = array(
    'description' => 'A one-to-one table extending {versioncontrol_item_revisions} with some additional git-specific data.',
    'fields' => array(
      'item_revision_id' => array(
        'description' => 'Foreign key to {versioncontrol_item_revisions}.item_revision_id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'blob_hash' => array(
        'description' => 'This item blob hash.',
        'type' => 'char',
        'length' => 40,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('item_revision_id'),
  );

  db_create_table($ret, 'versioncontrol_git_item_revisions', $versioncontrol_git_item_revisions_schema);

  module_load_include('inc', 'versioncontrol_git', 'versioncontrol_git.log');

  $git_backend = versioncontrol_get_backends('git', TRUE);
  $repositories = $git_backend->loadEntities('repo', FALSE, array('vcs' => 'git'));

  foreach ($repositories as $repo) {
    $root = escapeshellcmd($repo->root);
    putenv("GIT_DIR=$root");
    $item_revisions = $repo->getBackend()->loadEntities('item', array(), array('repo_id' => $repo->repo_id));
    foreach ($item_revisions as $item_revision) {
      $command = 'ls-tree -r ' . escapeshellarg($item_revision->revision) . ' ' . escapeshellarg(substr($item_revision->path, 1));
      $logs = _versioncontrol_git_log_exec($command);
      $blob_hash = _versioncontrol_git_parse_item_blob($logs);
      if (!empty($blob_hash)) {
        // blob is empty when at delete
        db_query("INSERT INTO {versioncontrol_git_item_revisions}(item_revision_id, blob_hash) VALUES (%d, '%s')", array($item_revision->item_revision_id, $blob_hash));
      }
    }
  }

  return $ret;
}

/**
 * Adds the versioncontrol_git_repositories table.
 */
function versioncontrol_git_update_6203() {
  $ret = array();

  $versioncontrol_git_repositories_schema = array(
    'description' => 'A one-to-one table extending {versioncontrol_repositories} with additional git-specific data.',
    'fields' => array(
      'repo_id' => array(
        'description' => 'Foreign key to {versioncontrol_repositories}.repo_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'default_branch' => array(
        'description' => 'The default (HEAD) branch of the git repository.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('repo_id'),
  );

  db_create_table($ret, 'versioncontrol_git_repositories', $versioncontrol_git_repositories_schema);

  return $ret;
}

/**
 * Reads the default branches from all existing Git repositories to synchronize
 * the database.
 */
function versioncontrol_git_update_6204() {
  // Clear the autoload caches to make the new classes available.
  cache_clear_all();

  // Get the repository manager queue.
  drupal_queue_include();
  $queue = DrupalQueue::get('versioncontrol_repomgr');

  // Load all git repositories and add them to the queue.
  $repos = versioncontrol_repository_load_multiple(NULL, array('vcs' => 'git'));
  foreach ($repos as $repo) {
    $queue->createItem(array(
      'operation' => array(
        'fetchDefaultBranch' => array(),
        'save' => array(),
      ),
      'repository' => $repo,
    ));
  }

  return array();
}

/**
 * When adding the versioncontrol_git_repositories table in
 * versioncontrol_git_update_6203() it should have been populated with empty
 * rows. Truncate it, do that and run versioncontrol_git_update_6204() again.
 */
function versioncontrol_git_update_6205() {
  db_truncate('versioncontrol_git_repositories');
  db_query("INSERT INTO {versioncontrol_git_repositories} (repo_id, default_branch) SELECT repo_id, '' FROM {versioncontrol_repositories} WHERE vcs = 'git'");

  // Call the old update function instead of copying the code here.
  return versioncontrol_git_update_6204();
}

/**
 * Introduce the {versioncontrol_git_event_data} table, which stores extended
 * "event" (e.g., push) data in tandem with {versioncontrol_event_log}.
 */
function versioncontrol_git_update_6206() {
  $ret = array();
  $schema = array(
    'description' => 'Links Version control events, as represented by the {versioncontrol_event_log} table, with real Git commit, branch and tag data.',
    'fields' => array(
      'elid' => array(
        'description' => 'Foreign key to {versioncontrol_event_log}.elid; identifies the Git event to which this extended linking data corresponds.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'refname' => array(
        'description' => 'The name of the ref that was updated.',
        'type' => 'varchar',
        'not null' => TRUE,
      ),
      'label_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'reftype' => array(
        'description' => '2 == branch, 3 == tag.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
      'old_sha1' => array(
        'description' => 'The object to which this ref pointed before the push.',
        'type' => 'char',
        'length' => 40,
        'not null' => TRUE,
      ),
      'new_sha1' => array(
        'description' => 'The object to which this ref pointed after the push.',
        'type' => 'char',
        'length' => 40,
        'not null' => TRUE,
      ),
      'commits' => array(
        'description' => 'For incremental branch updates (i.e., excluding branch creation and deletion), a serialized list of all the commits contained in the push.',
        'type' => 'blob',
        'size' => 'big',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('elid', 'refname'),
    'indexes' => array(
      'old_sha1' => array('old_sha1'),
      'new_sha1' => array('new_sha1'),
    ),
  );

  if (in_array($GLOBALS['db_type'], array('mysql', 'mysqli'))) {
    // This is evil, but there is not standard way to change a field collation.
    $schema['fields']['refname']['mysql_type'] = "VARCHAR(255) CHARACTER SET utf8 COLLATE utf8_bin";
  }
  else {
    $schema['fields']['refname']['length'] = 255;
  }

  db_create_table($ret, 'versioncontrol_git_event_data', $schema);
  return $ret;
}

/**
 * Add the 'ff' field to {versioncontrol_git_event_data}, which records whether
 * a branch ref update was fast-forward or not.
 */
function versioncontrol_git_update_6207() {
  $ret = array();
  $spec = array(
    'description' => 'For branch updates, indicates whether or not the ref update was a fast-forward.',
    'type' => 'int',
    'size' => 'tiny',
    'not null' => FALSE,
  );

  db_add_field($ret, 'versioncontrol_git_event_data', 'ff', $spec);
  return $ret;
}

/**
 * Remove {versioncontrol_git_event_data}.commits field.
 */
function versioncontrol_git_update_6208() {
  $ret = array();
  db_drop_field($ret, 'versioncontrol_git_event_data', 'commits');
  return $ret;
}

/**
 * Add reftype as part of the {versioncontrol_git_event_data} PK.
 */
function versioncontrol_git_update_6209() {
  $ret = array();
  db_drop_primary_key($ret, 'versioncontrol_git_event_data');
  db_add_primary_key($ret, 'versioncontrol_git_event_data', array('elid', 'refname', 'reftype'));
  return $ret;
}
